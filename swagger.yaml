openapi: "3.0.0"
info:
  title: "API de Transactions"
  description: "Documentation de l'API pour gérer les transactions des utilisateurs."
  version: "1.0.0"
servers:
  - url: "http://api.example.com/v1"
    description: "Serveur principal (Production)"
  - url: "http://staging.api.example.com/v1"
    description: "Serveur de test (Staging)"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: string
          description: "ID unique de la transaction."
        accountId:
          type: string
          description: "ID du compte associé à la transaction."
        userId:
          type: string
          description: "ID de l'utilisateur ayant effectué la transaction."
        date:
          type: string
          format: date
          description: "Date de la transaction."
        description:
          type: string
          description: "Description de la transaction."
        amount:
          type: number
          format: float
          description: "Montant de la transaction."
        balance:
          type: number
          format: float
          description: "Solde après la transaction."
      example:
        id: "1"
        accountId: "123"
        userId: "456"
        date: "2023-06-20"
        description: "Golden Sun Bakery"
        amount: 5
        balance: 2082.79
    NewTransaction:
      type: object
      required:
        - accountId
        - userId
        - date
        - description
        - amount
        - balance
      properties:
        accountId:
          type: string
          description: "ID du compte associé à la transaction."
        userId:
          type: string
          description: "ID de l'utilisateur ayant effectué la transaction."
        date:
          type: string
          format: date
          description: "Date de la transaction."
        description:
          type: string
          description: "Description de la transaction."
        amount:
          type: number
          format: float
          description: "Montant de la transaction."
        balance:
          type: number
          format: float
          description: "Solde après la transaction."
      example:
        accountId: "123"
        userId: "456"
        date: "2023-06-20"
        description: "Golden Sun Bakery"
        amount: 5
        balance: 2082.79
    UpdateTransaction:
      type: object
      properties:
        accountId:
          type: string
          description: "ID du compte associé à la transaction."
        userId:
          type: string
          description: "ID de l'utilisateur ayant effectué la transaction."
        date:
          type: string
          format: date
          description: "Date de la transaction."
        description:
          type: string
          description: "Description de la transaction."
        amount:
          type: number
          format: float
          description: "Montant de la transaction."
        balance:
          type: number
          format: float
          description: "Solde après la transaction."
      example:
        accountId: "123"
        userId: "456"
        date: "2023-06-20"
        description: "Golden Sun Bakery"
        amount: 5
        balance: 2082.79
security:
  - BearerAuth: []
paths:
  /transactions:
    post:
      summary: "Crée une nouvelle transaction"
      description: "Ajoute une nouvelle transaction à la base de données."
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTransaction"
      responses:
        "201":
          description: "Transaction créée avec succès."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: "Requête invalide."
        "500":
          description: "Erreur interne du serveur."
  /transactions/{transactionId}:
    put:
      summary: "Met à jour une transaction spécifique"
      description: "Met à jour les détails d'une transaction existante."
      security:
        - BearerAuth: []
      parameters:
        - name: transactionId
          in: path
          required: true
          description: "ID de la transaction à mettre à jour."
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTransaction"
      responses:
        "200":
          description: "Transaction mise à jour avec succès."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: "Requête invalide."
        "404":
          description: "Transaction non trouvée."
        "500":
          description: "Erreur interne du serveur."
    delete:
      summary: "Supprime une transaction spécifique"
      description: "Supprime une transaction existante en utilisant son ID."
      security:
        - BearerAuth: []
      parameters:
        - name: transactionId
          in: path
          required: true
          description: "ID de la transaction à supprimer."
          schema:
            type: string
      responses:
        "204":
          description: "Transaction supprimée avec succès."
        "404":
          description: "Transaction non trouvée."
        "500":
          description: "Erreur interne du serveur."
  /transactions/account/{accountId}:
    get:
      summary: "Récupère les transactions d'un compte spécifique"
      description: "Retourne toutes les transactions associées à un compte spécifique."
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          description: "ID du compte dont les transactions doivent être récupérées."
          schema:
            type: string
      responses:
        "200":
          description: "Liste des transactions du compte récupérée avec succès."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "404":
          description: "Compte non trouvé."
        "500":
          description: "Erreur interne du serveur."
